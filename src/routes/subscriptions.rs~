use actix_web::{web, HttpResponse, Responder};
use chrono::Utc;
use sqlx::PgPool;
use tracing::Instrument;
use uuid::Uuid;

#[derive(serde::Deserialize)]
pub struct SubscribeFormData {
    name: String,
    email: String,
}

pub async fn subscribe(
    connection: web::Data<PgPool>,
    form: web::Form<SubscribeFormData>,
) -> impl Responder {
    let req_id = Uuid::new_v4();

    let request_span = tracing::info_span!(
        "Adding a new subscriber", %req_id,
        email = %form.email,
        name = %form.name);

    let _request_span_guard = request_span.enter();

    let query_span = tracing::info_span!("Saving a new subscriber details in the database");

    match sqlx::query!(
        r#"insert into subscriptions (id, email, name, subscribed_at) values ($1, $2, $3, $4)"#,
        Uuid::new_v4(),
        form.email,
        form.name,
        Utc::now()
    )
    .execute(connection.get_ref())
    .instrument(query_span)
    .await
    {
        Ok(_) => HttpResponse::Ok(),
        Err(_) => HttpResponse::InternalServerError(),
    }
}
